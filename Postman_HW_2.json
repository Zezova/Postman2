{
	"info": {
		"_postman_id": "c4c1fcac-8eb9-4b94-8d07-b4c077e1bc3e",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20072079"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var resp_data = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name in response is equal to name in request\", function () {\r",
							"        pm.expect(resp_data.name).to.eql('Katja');\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age in response is equal to age in request\", function () {\r",
							"        pm.expect(resp_data.age).to.eql('33');\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary in response equals salary in request\", function () {\r",
							"        pm.expect(resp_data.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"var req_data = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response equals name in request (name from req)\", function () {\r",
							"        pm.expect(req_data.name).to.eql(resp_data.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in response is equal to age in request (age from re)\", function () {\r",
							"       pm.expect(req_data.age).to.eql(resp_data.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary in response is equal to salary in request (salary from req)\", function () {\r",
							"       pm.expect(+req_data.salary).to.eql(resp_data.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family - \", resp_data.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year in response is equal to salary*4 (salary from req)\", function () {\r",
							"        pm.expect((+req_data.salary)*4).to.eql(resp_data.family.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Katja",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var resp = pm.response.json();\r",
							"\r",
							"    var resp_name = resp.name;\r",
							"    var resp_age = resp.age;\r",
							"    var resp_salary = resp.salary;\r",
							"//4. Спарсить request.\r",
							"    var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"    var req_name = req_url.name;\r",
							"    var req_age = req_url.age;\r",
							"    var req_salary = req_url.salary;\r",
							"    var dogname = resp.family.pets.dog;\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request (name from req)\", function () {\r",
							"        pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in response = age in request (age from req)\", function () {\r",
							"        pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary in response = salary in request (salary from req)\", function () {\r",
							"        pm.expect(+resp_salary).to.eql(+req_salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family \", resp.family);\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function () {\r",
							"        pm.expect(dogname).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"        pm.expect(dogname).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name is Luky\", function () {\r",
							"        pm.expect(dogname).to.have.property(\"name\", \"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age is 4\", function () {\r",
							"        pm.expect(dogname).to.have.property(\"age\", 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Katja",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Katja&age=33&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Katja"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var resp = pm.response.json();\r",
							"\r",
							"    var resp_name = resp.name;\r",
							"    var resp_age = resp.age;\r",
							"    var resp_salary = resp.salary;\r",
							"//4. Спарсить request.\r",
							"    var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"    var req_name = req_url.name;\r",
							"    var req_age = req_url.age;\r",
							"    var req_salary = req_url.salary;\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response = name in request (name from req)\", function () {\r",
							"        pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age in response = age in request (age from req)\", function () {\r",
							"        pm.expect(+resp_age).to.eql(+req_age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Response salary is \", req_salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Response salary is \", resp_salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Response salary is \", resp_salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Response salary is \", resp_salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Response salary is \", resp_salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response salary = Request salary\", function () {\r",
							"        pm.expect(+resp_salary[0]).to.eql(+req_salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Response salary = Request salary\", function () {\r",
							"        pm.expect(+resp_salary[1]).to.eql(+req_salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Response salary = Request salary\", function () {\r",
							"        pm.expect(+resp_salary[2]).to.eql(+req_salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req_name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i in resp_salary) {\r",
							"    console.log(\"Key \" + i, \"value \" + resp_salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Katja",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Katja&age=33&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Katja"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"let resp_salary_after_1_5_year = resp[\"qa_salary_after_1.5_year\"];\r",
							"let resp_salary_after_12_months = resp.qa_salary_after_12_months;\r",
							"let resp_salary_after_3_5_years = resp[\"qa_salary_after_3.5_years\"];\r",
							"let resp_salary_after_6_months = resp.qa_salary_after_6_months;\r",
							"let resp_start_qa_salary = resp.start_qa_salary;\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"let req_salary = req.salary;\r",
							"let req_age = req.age;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response has start_qa_salary\", function () {\r",
							"       pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has qa_salary_after_6_months\", function () {\r",
							"       pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response has qa_salary_after_12_months\", function () {\r",
							"       pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response has qa_salary_after_1.5_year\", function () {\r",
							"       pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response has qa_salary_after_3.5_years\", function () {\r",
							"       pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response has person\", function () {\r",
							"       pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start_qa_salary = salary in request (salary from req)\", function () {\r",
							"       pm.expect(+resp_start_qa_salary).to.eql(+req_salary);\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_6_months = salary*2 in request (salary from req)\", function () {\r",
							"       pm.expect(+resp_salary_after_6_months).to.eql((+req_salary)*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_12_months = salary*2.7 in request (salary from req)\", function () {\r",
							"       pm.expect(+resp_salary_after_12_months).to.eql((+req_salary)*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_1.5_year = salary*3.3 in request (salary from req)\", function () {\r",
							"       pm.expect(+resp_salary_after_1_5_year).to.eql((+req_salary)*3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_3.5_years = salary*3.8 in request (salary from req)\", function () {\r",
							"       pm.expect(+resp_salary_after_3_5_years).to.eql((+req_salary)*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Person u_name = salary in request (salary from req)\", function () {\r",
							"       pm.expect(resp.person.u_name[1]).to.eql(+req_salary);\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"U_age = age in request (age from req)\", function () {\r",
							"       pm.expect(resp.person.u_age).to.eql(+req_age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"U_salary_5_years = salary*4.2 in request (salary from req)\", function () {\r",
							"       pm.expect(resp.person.u_salary_5_years).to.eql((+req_salary)*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i in resp.person) {\r",
							"   console.log(\"Key \" + i, \"value \" + resp.person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Katja",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}